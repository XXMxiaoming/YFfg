package com.yfwl.yfgp.schedule;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.yfwl.yfgp.model.Revenue;
import com.yfwl.yfgp.model.Everydayincome;
import com.yfwl.yfgp.model.IncomeLoss;
import com.yfwl.yfgp.service.EverydayincomeService;
import com.yfwl.yfgp.service.IncomeLossService;
import com.yfwl.yfgp.service.RevenueService;
import com.yfwl.yfgp.utils.AccountUtil;

public class RevenueSchedule {
	private static final double INIT_TOTAL = 1000000.f; // 设置初始金额
	@Autowired
	RevenueService revenueService;
	@Autowired
	IncomeLossService incomeLossService;
	@Autowired
	EverydayincomeService everydayincomeService;

	public void bindSchedule() {
		re();
	}

	public void re() {
		SimpleDateFormat dateSdf = new SimpleDateFormat("yyyyMMdd");
		Date datenow = new Date();
		String dateString = dateSdf.format(datenow);
		Calendar cl = Calendar.getInstance();
		cl.setTime(new Date());
		int week = cl.get(Calendar.DAY_OF_WEEK) - 1;
		if (!(week == 6 || week == 0 || AccountUtil.HOLIDAY_STRING
				.contains(dateString))) {
			//获取不同用户的离现在时间最近的一天的一条记录的集合
			List<Everydayincome> everydayincomeList = everydayincomeService
					.getDisEverydayincome();
			if (!everydayincomeList.isEmpty()) {
				Double bond = null;
				Double cash = null;
				Double futures = null;
				Double shares = null;
				Double totalassets=null;
				Integer userid = null;
				//获取最后一条传入的revenue;
			    Revenue re=	revenueService.selectRevenue2();
			    if(re==null){
			    	
			    }else{
			    	   Everydayincome evd=null;
						for (Everydayincome everydayincome : everydayincomeList) {
							bond =everydayincome.getBond()+ everydayincome.getBond()*re.getEd();
							cash =everydayincome.getCash()+ everydayincome.getCash()*re.getEc();
							futures =everydayincome.getFutures()+ everydayincome.getFutures()*re.getEf();
							shares =everydayincome.getShares()+ everydayincome.getShares()*re.getEs();
							totalassets=bond+cash+futures+shares;
							userid = everydayincome.getUserid();
							evd=new Everydayincome();
							evd.setBond(bond); 
							evd.setCash(cash);
							evd.setFutures(futures);
							evd.setShares(shares);
							evd.setTotalassets(totalassets);
							evd.setUserid(userid);
							everydayincomeService.insertEverydayincome(evd);
						}
			    }
			 
			}

		} else {

		}
	}
}
